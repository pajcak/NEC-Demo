#include <ncurses.h>

#include "GetParam.h"
#include "Colours.h"

const std::string AddMonitor::m_AddMonitorText [] = {
    "< : MOVE LEFT",
    "> : MOVE RIGHT",
    "^ : MOVE UP",
    "v : MOVE DOWN",
    "H : HELP",
    "M : MENU",
    "Press any key!"
};

AddMonitor::AddMonitor()
{
    m_window = newwin(11, 18, LINES / 2, COLS / 2 - 7);
    box(m_window, '|', '-');
}

AddMonitor::~AddMonitor()
{
    delwin(m_window);
}

void AddMonitor::showMenu(void)
{
    keypad(m_window, TRUE);
    wattron(m_window, COLOR_PAIR(RED));
    wattron(m_window, A_UNDERLINE);
    wattron(m_window, A_BOLD);
    mvwprintw(m_window, 1, 5, "%s", "AddMonitor");
    wattroff(m_window, A_BOLD);
    wattroff(m_window, A_UNDERLINE);
    wattroff(m_window, COLOR_PAIR(RED));
    
    wattron(m_window, COLOR_PAIR(CYAN));
    for (int i = 0; i < 6; i++) {
        mvwprintw(m_window, i + 2, 2, "%s", m_AddMonitorText[i].c_str());
    }
    wattroff(m_window, COLOR_PAIR(CYAN));
    
    wattron(m_window, COLOR_PAIR(GREEN));
    mvwprintw(m_window, 9, 2, "%s", m_AddMonitorText[6].c_str());
    wattroff(m_window, COLOR_PAIR(GREEN));
    
    wrefresh(m_window);
    
    while (true) {
        if (getch()) {
            wclear(m_window);
            wrefresh(m_window);
            break;
        }
    }
    keypad(m_window, FALSE);
}
